type Query {
  getOption(id: ID): Boolean!
  getCharacterConversations(
    limit: Int!
    nextToken: String
    characterId: String!
  ): Conversations!
  getChapterConversations(
    limit: Int!
    nextToken: String
    chapterId: String!
  ): Conversations!
  getAllConversations(limit: Int!, nextToken: String): Conversations!
  getPuzzle(puzzleId: String!): Puzzle!
  getPuzzles(limit: Int!): Puzzles!
  getConversationOptions(conversationId: String!): Options!
  getChapter(chapterId: String!): Chapter!
  getChapters(limit: Int!, nextToken: String): Chapters!
  getCharacter(characterId: String!): Character!
  getCharacters: Characters!
  getConversation(conversationId: String): Conversation!
}

type Mutation {
  createPlayerAccount(input: CreatePlayerInput!): Player! @aws_api_key
  updatePlayerAccount(input: UpdatedPlayerInput!): Player! @aws_api_key
  createConversationPuzzle(input: CreatePuzzleInput!): Puzzle! @aws_api_key
  createConversationOption(input: CreateOptionInput!): Option! @aws_api_key
  createConversation(input: CreateConversationInput!): Conversation!
    @aws_api_key
  createChapter(input: CreateChapterInput!): Chapter!
  createCharacter(input: CreateCharacterInput!): Character! @aws_api_key

  sendOption(input: OptionInput!): Boolean! @aws_api_key
  notifyOptionResponse(
    input: NotifyOptionResponseInput!
  ): ConversationResponse! @aws_iam @aws_api_key
}

type Subscription {
  onOptionResponse: ConversationResponse
    @aws_subscribe(mutations: ["notifyOptionResponse"])
}

input CreatePlayerInput {
  currentChapterId: String!
  completedChapterIds: [String!]
  solvedPuzzleIds: [String!]
  unlockedRelicIds: [String!]
  unlockedCharacterIds: [String!]
}

input UpdatedPlayerInput {
  id: String!
  currentChapterId: String!
  completedChapterIds: [String!]
  solvedPuzzleIds: [String!]
  unlockedRelicIds: [String!]
  unlockedCharacterIds: [String!]
}
type Characters {
  items: [Character!]!
}
type Character {
  id: String!
  characterName: String!
  characterBackstory: String!
  role: CHARACTER_ROLE!
  conversation: [Conversation!]
}
input CreateCharacterInput {
  characterName: String!
  characterBackstory: String!
  role: CHARACTER_ROLE!
}
enum CHARACTER_ROLE {
  LIBRARIAN
  GUIDE
  MAYOR
  HISTORIAN_PROFESSOR
}
type Player {
  id: String!
  currentChapterId: String!
  completedChapterIds: [String!]
  solvedPuzzleIds: [String!]
  unlockedRelicIds: [String!]
  unlockedCharacterIds: [String!]
}

input OptionInput {
  nextStepType: String!
  conversationId: String!
}

input CreatePuzzleInput {
  puzzleName: String!
  puzzleDescription: String!
  puzzleType: PUZZLETYPE!
  encryptedMessage: String!
  decryptedMessage: String!
  hint: String!
  chapterId: String!
}
type Puzzle {
  id: String!
  puzzleId: String!
  puzzleName: String!
  puzzleType: PUZZLETYPE!
  encryptedMessage: String!
  decryptedMessage: String!
  hint: String!
  puzzleDescription: String!
  chapterId: String!
}
type Puzzles {
  items: [Puzzle!]!
}
enum PUZZLETYPE {
  CYPHER_AND_RIDDLE
  LOGIC_PUZZLE_AND_PATTERN_RECOGNITION
}
type ConversationResponse @aws_api_key @aws_iam {
  id: String!
  conversationType: CONVERSATIONTYPE!
  imageUrl: String
  relicId: String
  puzzleId: String
  message: String
  characterId: String
  chapterId: String
}

type Conversation {
  id: String!
  message: String!
  conversationId: String!
  chapterId: String!
  characterId: String!
}

type Conversations {
  nextToken: String
  items: [Conversation!]!
}

enum CONVERSATIONTYPE {
  CONVERSATION
  PUZZLE
  RELIC
  GENERATIVE_IMAGE
}

input CreateOptionInput {
  relicId: String
  puzzleId: String
  conversationId: String!
  nextConversationId: String!
  nextStepType: CONVERSATIONTYPE!
  optionText: String!
}
input CreateChapterInput {
  chapterTitle: String!
}
type Chapter {
  id: String!
  chapterTitle: String!
}

type Chapters {
  nextToken: String
  items: [Chapter!]!
}

type Option {
  id: String!
  optionId: String!
  relicId: String
  puzzleId: String
  conversationId: String!
  nextConversationId: String!
  nextStepType: CONVERSATIONTYPE!
  optionText: String!
}
type Options {
  items: [Option!]!
}

input CreateConversationInput {
  message: String!
  chapterId: String!
  characterId: String!
}

input NotifyOptionResponseInput {
  id: String!
  conversationType: CONVERSATIONTYPE!
  imageUrl: String
  relicId: String
  puzzleId: String
  message: String
  characterId: String
  chapterId: String
}
